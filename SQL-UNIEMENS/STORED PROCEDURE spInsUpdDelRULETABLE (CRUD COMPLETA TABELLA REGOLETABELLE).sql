/*
CRUD COMPLETA PER LA SELEZIONE, L'INSERIMENTO, LA MODIFICA, LA CANCELLAZIONE E LA COPIA (DUPLICATO)
DI UNA TABELLAREGOLA ALL'INTERNO DELLA TABELLA "RULES_TABLES"

SELECT * FROM RULES_TABLES

ESEMPI DI INVOCAZIONE:
--------------------------------------------------------
-- SELEZIONE (SELECT)
--------------------------------------------------------
EXEC	spSelInsUpdDelCpyRULETABLE 
		'SEL' -- @OP -- (MOSTRA TUTTE LE RIGHE)
		-- @IDRuleTAB 
		-- @IDRule 
		-- @ObjectID 
		-- @ALIAS
		-- @ExtendedDescription

EXEC	spSelInsUpdDelCpyRULETABLE 
		'SEL' -- @OP
		,2 -- @IDRuleTAB -- (MOSTRA SOLO LA TABELLA CORRISPONDENTE AL VALORE SPECIFICATO NEL PARAMETRO, CHE IN QUESTO CASO E' CHIAVE NUMERICA PRIMARIA)
		-- @IDRule 
		-- @ObjectID 
		-- @ALIAS
		-- @ExtendedDescription

EXEC	spSelInsUpdDelCpyRULETABLE 
		'SEL' -- @OP
		-- @IDRuleTAB 
		,@IDRule = 1 -- (MOSTRA SOLO LE RIGHE APPARTENENTI ALLA REGOLA NUMERO 1)
		-- @ObjectID 
		-- @ALIAS
		-- @ExtendedDescription

DECLARE @oid int
SET @oid = dbo.fnGetObjectID('var.TAB_CONTR_031CM')
EXEC	spSelInsUpdDelCpyRULETABLE 
		'SEL' -- @OP
		-- @IDRuleTAB 
		-- @IDRule
		,@ObjectID = @oid -- (MOSTRA SOLO LE RIGHE IL CUI NOME DI TABELLA CORRISPONDE A QUANTO RESTITUITO DALLA FUNZIONE DI CONVERSIONE Nome/ObjectID)
		-- @ALIAS
		-- @ExtendedDescription

EXEC	spSelInsUpdDelCpyRULETABLE 
		'SEL' -- @OP
		-- @IDRuleTAB 
		-- @IDRule
		-- @ObjectID 
		,@ALIAS = 'BASE' -- (MOSTRA TUTTE LE RIGHE NEL CUI ALIAS SIA CONTENUTO IL VALORE SPECIFICATO DAL PARAMETRO @ALIAS - UTILIZZA LA LIKE)
		-- @ExtendedDescription

EXEC	spSelInsUpdDelCpyRULETABLE 
		'SEL' -- @OP
		-- @IDRuleTAB 
		-- @IDRule
		-- @ObjectID 
		-- @ALIAS
		,@ExtendedDescription = 'Variazione' -- (MOSTRA TUTTE LE RIGHE NELLA CUI DESCRIZIONE ESTESA SIA CONTENUTO IL VALORE SPECIFICATO DAL PARAMETRO @ExtendedDescription - UTILIZZA LA LIKE)

--------------------------------------------------------
-- INSERIMENTO
--------------------------------------------------------
EXEC	spSelInsUpdDelCpyRULETABLE 
		'INS' -- @OP
		,NULL -- @IDRuleTAB (LA COLONNA CORRISPONDENTE A QUESTO PARAMETRO E' UNA PRIMARY KEY IDENTITY(1,1) QUINDI NON VA VALORIZZATA IN CASO DI INSERIMENTO - IL PARAMETRO SARA' COMUNQUE IGNORATO IN CASO DI VALORIZZAZIONE ACCIDENTALE)
		,dbo.fnGetRuleID('VariazioneInTolleranzaRispettoAllaBase') -- @IDRule (QUESTO VALORE DEVE CORRISPONDERE OBBLIGATORIAMENTE AD UN IDRule PREESISTENTE NELLA TABELLA "RULES")
		,dbo.fnGetObjectID('dbo.TAB_CONTR_031CM') -- @ObjectID (NOTARE CHE IL NOME DELLA TABELLA FISICA E' COMPRENSIVO DELLO SCHEMA "dbo.": LO SCHEMA NON VA OBBLIGATORIAMENTE SPECIFICATO - SARA' AGGIUNTO AUTOMATICAMENTE IL PREFISSO "dbo." - SE NON IN QUEI CASI NEI QUALI ESISTONO TABELLE AVENTI LO STESSO NOME MA UN DIVERSO SCHEMA)
		,'TABLETEST' -- @ALIAS
		,'TABELLA BASE DI PROVA' -- @ExtendedDescription
--------------------------------------------------------


--------------------------------------------------------
-- VARIAZIONE
--------------------------------------------------------
-- PRIMO ESEMPIO

EXEC	spSelInsUpdDelCpyRULETABLE 
		'UPD' -- @OP
		,2 -- @IDRuleTAB (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		,dbo.fnGetRuleID('BASEInTolleranza') -- @IDRule (QUESTA COLONNA VIENE AGGIORNATA, PERTANTO LA TABELLA CAMBIERA' L'APPARTENENZA, DIVENENDO UNA DERIVATA DELLA REGOLA SPECIFICATA)
		-- @ObjectID -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ALIAS -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ExtendedDescription -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)


-- SECONDO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ObjectID E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO IL PARAMETRO @IDRule E' STATO OMESSO. QUEST'ULTIMO, PERTANTO, MANTERRA' IL SUO VALORE ORIGINARIO

EXEC	spSelInsUpdDelCpyRULETABLE 
		'UPD' -- @OP
		,2 -- @IDRuleTAB (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		-- @IDRule (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		,@ObjectID = dbo.fnGetObjectID('var.TAB_CONTR_031CM') -- (VARIANDO LA COLONNA ObjectID SI ALTERERA' COMPLETAMENTE LA NATURA DELLA TABELLA - ALL'INTERNO DEL MECCANISMO DELLE REGOLE -: QUESTO POTREBBE RICHIEDERE LA MODIFICA A CASCATA DI TUTTE LE ALTRE ENTITA' QUALI I NOMI DI COLONNE NELLE TABELLE "RULES_FIELDS", "RULES_JOINS", "RULES_JOINCONDITIONS", "RULES_WHERECONDITIONS")
		-- @ALIAS -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ExtendedDescription -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)


-- TERZO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ALIAS E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRule E @ObjectID SONO STATI OMESSI. QUESTI ULTIMI, PERTANTO, MANTERRANNO I LORO VALORI ORIGINARI, DICASI LO STESSO PER IL PARAMETRO @ExtendedDescription)

EXEC	spSelInsUpdDelCpyRULETABLE 
		'UPD' -- @OP
		,2 -- @IDRuleTAB (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		-- @IDRule (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ObjectID -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		,@ALIAS = 'TESTTABLE' -- (VARIARE L'ALIAS DI UNA TABELLA DELLE REGOLE, PUO' COMPORTARE LA PERDITA DEL RIFERIMENTO DA PARTE DI ALCUNE FUNZIONI CHE UTILIZZANO L'ALIAS PER RISALIRE ALL'OGGETTO TABELLA DELLE REGOLE)
		-- @ExtendedDescription -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)


-- QUARTO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ExtendedDescription E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRule, @ObjectID E @ALIAS SONO STATI OMESSI. QUESTI ULTIMI, PERTANTO, MANTERRANNO I LORO VALORI ORIGINARI)

EXEC	spSelInsUpdDelCpyRULETABLE 
		'UPD' -- @OP
		,2 -- @IDRuleTAB (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		-- @IDRule (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ObjectID -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ALIAS -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		,@ExtendedDescription = 'Nuova descrizione estesa' -- (VARIANDO LA DESCRIZIONE ESTESA NON SARANNO OSSERVABILI IMPATTI DI ALCUN TIPO)
--------------------------------------------------------


--------------------------------------------------------
-- ELIMINAZIONE 
--------------------------------------------------------
-- PRIMO ESEMPIO

EXEC	spSelInsUpdDelCpyRULETABLE 
		'DEL' -- @OP
		,2 -- @IDRuleTAB (ELIMINAZIONE PER CHIAVE PRIMARIA, ELIMINA UNA SOLA RIGA, SE TROVA LA CORRISPONDENZA)
		-- @IDRule -- (PARAMETRO INUTILIZZATO)
		-- @ObjectID -- (PARAMETRO INUTILIZZATO)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)


-- SECONDO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @IDRule E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO IL PARAMETRO @IDRuleTAB E' STATO OMESSO

EXEC	spSelInsUpdDelCpyRULETABLE 
		'DEL' -- @OP
		-- @IDRuleTAB (PARAMETRO INUTILIZZATO)
		,@IDRule = 1 -- (ELIMINA UNA O PIU' RIGHE, A SECONDA DELLA CORRISPONDENZA)
		-- @IDRule -- (PARAMETRO INUTILIZZATO)
		-- @ObjectID -- (PARAMETRO INUTILIZZATO)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)


-- TERZO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ObjectID E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRuleTAB E @IDRule SONO STATI OMESSI

EXEC	spSelInsUpdDelCpyRULETABLE 
		'DEL' -- @OP
		-- @IDRuleTAB (PARAMETRO INUTILIZZATO)
		-- @IDRule -- (PARAMETRO INUTILIZZATO)
		,@ObjectID = dbo.fnGetObjectID('var.TAB_CONTR_031CM') -- (ELIMINA UNA SOLA RIGA - IL VALORE DELLA COLONNA RuleName HA UN INDICE UNIQUE -, SE TROVA LA CORRISPONDENZA)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)


-- QUARTO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ALIAS E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRuleTAB, @IDRule E @ObjectID SONO STATI OMESSI
EXEC	spSelInsUpdDelCpyRULETABLE 
		'DEL' -- @OP
		-- @IDRuleTAB (PARAMETRO INUTILIZZATO)
		-- @IDRule -- (PARAMETRO INUTILIZZATO)
		-- @ObjectID -- (PARAMETRO INUTILIZZATO)
		,@ALIAS = 'REGOLA DI PROVA' -- (ELIMINA UNA SOLA RIGA - IL VALORE DELLA COLONNA "ALIAS" HA UN INDICE UNIQUE -, SE TROVA LA CORRISPONDENZA)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
--------------------------------------------------------


--------------------------------------------------------
-- COPIA (O DUPLICAZIONE)
-- LA COPIA PUO' ESSERE EFFETTUATA ESCLUSIVAMENTE
-- PARTENDO DA UN IDRule ESISTENTE O DA UN RuleName 
-- ESISTENTE
--------------------------------------------------------
-- PRIMO ESEMPIO

EXEC	spSelInsUpdDelCpyRULETABLE 
		'CPY' -- @OP
		,1 -- @IDRule (CREA UNA RIGA CLONE DELLA REGOLA CORRISPONDENTE ALLA COLONNA CHIAVE, DIVERSIFICANDOLA DALLA RIGA ORIGINE VARIANDO LA COLONNA RuleName - SARA' AGGIUNTO, IN CODA AL PREESISTENTE VALORE DELLA COLONNA RuleName, UN NUMERO PROGRESSIVO CONSECUTIVO AUTOMATICO DEL TIPO "Nome regola (1)")


-- SECONDO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @RuleName E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRuleTAB, @IDRule, @ObjectID E @ALIAS SONO STATI OMESSI

EXEC	spSelInsUpdDelCpyRULETABLE 
		'CPY' -- @OP
		,@RuleName = 'VariazioneInTolleranzaRispettoAllaBase' (CREA UNA RIGA CLONE DELLA REGOLA LA CUI COLONNA RuleName CORRISPONDE A QUANTO SPECIFICATO NEL PARAMETRO, DIVERSIFICANDOLA DALLA RIGA ORIGINE IN QUANTO, NELLA NUOVA RIGA, ALLA COLONNA RuleName SARA' AGGIUNTO, IN CODA AL PREESISTENTE VALORE, UN NUMERO PROGRESSIVO CONSECUTIVO AUTOMATICO DEL TIPO "VariazioneInTolleranzaRispettoAllaBase (1)")
*/
ALTER PROC	dbo.spSelInsUpdDelCpyRULETABLE
			@OP varchar(3) -- 'SEL', 'INS', 'UPD', 'DEL', 'CPY'
			,@IDRuleTAB int = NULL
			,@IDRule int = NULL
			,@ObjectID int = NULL 
			,@ALIAS varchar(128) = NULL
			,@ExtendedDescription varchar(MAX) = NULL
AS

IF ISNULL(@OP,'') != ''
	BEGIN
		DECLARE @rulesTABCount int

		-----------------------------------------------------------------------------
		-- SELEZIONE DI UNA O PIU' REGOLE IN BASE ALLA VALORIZZAZIONE DEI PARAMETRI
		-----------------------------------------------------------------------------
		IF @OP = 'SEL'
			BEGIN
				SELECT	
						R.*
						,V.*
				FROM	RULES_TABLES R WITH(NOLOCK)
						INNER JOIN
						VTablesAndSchemas V
						ON R.ObjectID = V.ObjectID
				WHERE	(IDRuleTAB = @IDRuleTAB OR @IDRuleTAB IS NULL)
				AND		(IDRule = @IDRule OR @IDRule IS NULL)
				AND		(R.ObjectID = @ObjectID OR @ObjectID IS NULL)
				AND		(ALIAS LIKE '%' + @ALIAS + '%' OR @ALIAS IS NULL)
				AND		(ExtendedDescription LIKE '%' + @ExtendedDescription + '%' OR @ExtendedDescription IS NULL)
			END

		-----------------------------------------------------------------------------
		-- INSERIMENTO DI UNA NUOVA REGOLA: E' OBBLIGATORIO VALORIZZARE TUTTI I
		-- PARAMETRI RELATIVI ALLE COLONNE DELLA TABELLA DEFINITE COME "NOT NULL"
		-----------------------------------------------------------------------------
		IF @OP = 'INS'
		AND ISNULL(@IDRule,0) != 0
		AND ISNULL(@ObjectID,0) != 0
		AND ISNULL(@ALIAS,'') != ''
			BEGIN
				IF EXISTS (SELECT IDRule FROM RULES WITH(NOLOCK) WHERE IDrule = @IDRule)
					BEGIN
						INSERT	RULES_TABLES
								(
									IDRule
									,ObjectID
									,ALIAS
									,ExtendedDescription
								) 
						SELECT	
								@IDRule AS IDRule
								,@ObjectID AS ObjectID
								,@ALIAS AS ALIAS
								,@ExtendedDescription AS ExtendedDescription
					END
					RETURN SCOPE_IDENTITY()
			END
		-----------------------------------------------------------------------------


		-----------------------------------------------------------------------------
		-- AGGIORNAMENTO DEI CONTENUTI DEI CAMPI (AD ESCLUSIONE DELL'IDRuleTAB)
		-- IN BASE AI PARAMETRI VALORIZZATI: I VALORI DELLE COLONNE NON SPECIFICATE 
		-- NEI PARAMETRI SARANNO MANTENUTI INALTERATI PERTANTO, PER ALTERARLI O
		-- SVUOTARLI (NULL, QUANDO CONSENTITO) INVOCARE LA STORED PROCEDURE
		-- VALORIZZANDO TUTTI I PARAMETRI DESIDERATI
		-----------------------------------------------------------------------------
		IF @OP = 'UPD'
		AND ISNULL(@IDRuleTAB,0) != 0 -- PARAMETRO OBBLIGATORIO PER EFFETTUARE L'AGGIORNAMENTO
			BEGIN	
				DECLARE 
						@oldIDRule int
						,@oldObjectID int
						,@oldALIAS varchar(128)
						,@oldExtendedDescription varchar(MAX)
				
				-- MEMORIZZAZIONE DEI DATI PREESISTENTI (SE PRESENTI)
				-- PER LA LORO RIASSEGNAZIONE NEL CASO IN CUI QUESTI
				-- DEBBANO ESSERE MANTENUTI (OVVERO NON NE E' STATO
				-- SPECIFICATO UN NUOVO VALORE)
				SELECT
						@oldIDRule = IDRule
						,@oldObjectID = ObjectID
						,@oldALIAS = ALIAS
						,@oldExtendedDescription = ExtendedDescription
				FROM	RULES_TABLES WITH(NOLOCK)
				WHERE	IDRuleTAB = @IDRuleTAB

				-- SE ESISTE UNA COLONNA DA AGGIORNARE, RITORNATA DALLA 
				-- RICERCA PER IL PARAMETRO @IDRule, ALLORA PROCEDE CON
				-- L'AGGIORNAMENTO DELLE SOLE COLONNE PER LE QUALI E'
				-- STATO VALORIZZATO IL CORRISPONDENTE PARAMETRO
				IF ISNULL(@oldIDRule,0) != 0
					BEGIN
						UPDATE	RULES_TABLES
						SET		
								IDRule =
								CASE
									WHEN @IDRule IS NULL
									THEN @oldIDRule
									ELSE @IDRule
								END
								,ObjectID =
								CASE
									WHEN @ObjectID IS NULL
									THEN @oldObjectID
									ELSE @ObjectID
								END
								,ALIAS =
								CASE
									WHEN @ALIAS IS NULL
									THEN @oldALIAS
									ELSE @ALIAS
								END
								,ExtendedDescription =
								CASE
									WHEN @ExtendedDescription IS NULL
									THEN @oldExtendedDescription
									ELSE @ExtendedDescription
								END
						WHERE	IDRuleTAB = @IDRuleTAB
					END
			END
		-----------------------------------------------------------------------------


		-----------------------------------------------------------------------------
		-- ELIMINAZIONE DI UNA REGOLA IN BASE ALL'IDRuleTAB, ALL'ObjectID, ALL'IDRule
		-- ALL'ALIAS OPPURE ALL'ExtendedDescription (UNO SOLTANTO TRA QUESTI)
		-----------------------------------------------------------------------------
		IF @OP = 'DEL'
			BEGIN
				IF ISNULL(@IDRuleTAB,0) != 0
					BEGIN
						DELETE 
						FROM	RULES_TABLES
						WHERE	IDRuleTAB = @IDRuleTAB
					END
				IF ISNULL(@IDrule,0) != 0
					BEGIN
						DELETE 
						FROM	RULES_TABLES
						WHERE	IDrule = @IDrule
					END
				IF ISNULL(@ObjectID,0) != 0
					BEGIN
						DELETE 
						FROM	RULES_TABLES
						WHERE	@ObjectID = @ObjectID
					END
				IF ISNULL(@ALIAS,'') != ''
					BEGIN
						DELETE 
						FROM	RULES_TABLES
						WHERE	ALIAS = @ALIAS
					END
				IF ISNULL(@ExtendedDescription,'') != ''
					BEGIN
						DELETE 
						FROM	RULES_TABLES
						WHERE	ExtendedDescription = @ExtendedDescription
					END
			END
		-----------------------------------------------------------------------------


		-----------------------------------------------------------------------------
		-- CREAZIONE DI UNA COPIA CLONE DI UNA REGOLA, AGGIUNGENDO ALL'ALIAS DI QUESTA 
		-- UN SUFFISSO NUMERICO PROGRESSIVO "(1)", "(2)", "(3)", ETC.
		-- LA COPIA PUO' ESSERE EFFETTUATA PARTENDO DA UN IDRuleTAB ESISTENTE O DA
		-- UN "ALIAS" ESISTENTE
		-----------------------------------------------------------------------------
		IF @OP = 'CPY'
			BEGIN
				IF ISNULL(@IDRuleTAB,0) != 0
					BEGIN
						SELECT	@rulesTABCount = COUNT(*)
						FROM	RULES_TABLES WITH(NOLOCK)
						WHERE	ALIAS = (SELECT ALIAS FROM RULES_TABLES WITH(NOLOCK) WHERE IDRuleTAB = @IDRuleTAB)

						INSERT	RULES_TABLES
								(
									IDRule
									,ObjectID
									,ALIAS
									,ExtendedDescription
								) 
						SELECT	
								IDRule
								,ObjectID
								,LEFT(ALIAS,120)  + ' (' + CAST(@rulesTABCount AS varchar(6)) + ')' AS ALIAS -- RIDUCE A 120 CARATTERI IL VALORE DELLA COLONNA PER POTERVI INSERIRE IL PROGRESSIVO (LUNGO AL MASSIMO 6 CARATTERI), PIU' LE PARENTESI TONDE
								,ExtendedDescription
						FROM	RULES_TABLES WITH(NOLOCK)
						WHERE	IDRuleTAB = @IDRuleTAB
					END

				IF ISNULL(@ALIAS,'') != ''
					BEGIN
						SELECT	@rulesTABCount = COUNT(*)
						FROM	RULES_TABLES WITH(NOLOCK)
						WHERE	ALIAS = @ALIAS

						INSERT	RULES_TABLES
								(
									IDRule
									,ObjectID
									,ALIAS
									,ExtendedDescription
								) 
						SELECT	TOP 1
								IDRule
								,ObjectID
								,LEFT(ALIAS,120)  + ' (' + CAST(@rulesTABCount AS varchar(6)) + ')' AS ALIAS -- RIDUCE A 120 CARATTERI IL VALORE DELLA COLONNA PER POTERVI INSERIRE IL PROGRESSIVO (LUNGO AL MASSIMO 6 CARATTERI), PIU' LE PARENTESI TONDE
								,ExtendedDescription
						FROM	RULES_TABLES WITH(NOLOCK)
						WHERE	ALIAS = @ALIAS
						ORDER BY ALIAS
					END
			END
		-----------------------------------------------------------------------------

	END
