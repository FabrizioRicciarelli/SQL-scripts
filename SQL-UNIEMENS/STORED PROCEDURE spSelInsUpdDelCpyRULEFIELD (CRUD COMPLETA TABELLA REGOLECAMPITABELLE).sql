/*
CRUD COMPLETA PER L'INSERIMENTO, LA MODIFICA, LA CANCELLAZIONE E LA COPIA (DUPLICATO)
DEI CAMPITABELLAREGOLA ALL'INTERNO DELLA TABELLA "RULES_FIELDS"

SELECT * FROM RULES_FIELDS
SELECT * FROM VTABLESSCHEMASCOLUMNS ORDER BY FULLOBJECTNAME, FULLFIELDNAME


ESEMPI DI INVOCAZIONE:
--------------------------------------------------------
-- SELEZIONE (SELECT)
--------------------------------------------------------
EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP -- (MOSTRA TUTTE LE RIGHE)
		-- @IDRuleFIELD 
		-- @IDRuleTAB
		-- @ColumnID 
		-- @FieldName
		-- @ALIAS
		-- @ExtendedDescription
		-- @UseFlag

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		,4 -- @IDRuleFIELD -- (MOSTRA SOLO LA TABELLA CORRISPONDENTE AL VALORE SPECIFICATO NEL PARAMETRO, CHE IN QUESTO CASO E' CHIAVE NUMERICA PRIMARIA)
		-- @IDRuleTAB
		-- @ColumnID
		-- @FieldName 
		-- @ALIAS
		-- @ExtendedDescription
		-- @UseFlag

DECLARE @oid int
SET @oid = dbo.fnGetObjectID('var.TAB_CONTR_031CM')
EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		-- @IDRuleFIELD 
		,@IDRuleTAB = @oid -- (MOSTRA SOLO LE RIGHE IL CUI NOME DI TABELLA CORRISPONDE A QUANTO RESTITUITO DALLA FUNZIONE DI CONVERSIONE Nome/ObjectID)
		-- @ColumnID 
		-- @FieldName
		-- @ALIAS
		-- @ExtendedDescription
		-- @UseFlag

DECLARE @oid int
SET @oid = dbo.fnGetObjectID('var.TAB_CONTR_031CM')
EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		-- @IDRuleFIELD 
		,@IDRuleTAB = @oid
		,@ColumnID = 2 -- (MOSTRA SOLO LE RIGHE IL CUI IDENTIFICATIVO DI COLONNA CORRISPONDE AL PARAMETRO PASSATO - DA UTILIZZARE PREFERIBILMENTE IN CONGIUNZIONE CON IL PARAMETRO @IDRuleTAB)
		-- @FieldName
		-- @ALIAS
		-- @ExtendedDescription
		-- @UseFlag

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		-- @IDRuleFIELD 
		-- @IDRuleTAB
		-- @ColumnID
		,@FieldName = 'ID_CONTR' -- (MOSTRA TUTTE LE RIGHE NEL CUI FieldName SIA CONTENUTO IL VALORE SPECIFICATO DAL PARAMETRO @FieldName)
		-- @ALIAS
		-- @ExtendedDescription
		-- @UseFlag

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		-- @IDRuleFIELD 
		-- @IDRuleTAB
		-- @ColumnID
		-- @FieldName 
		,@ALIAS = 'BASE' -- (MOSTRA TUTTE LE RIGHE NEL CUI ALIAS SIA CONTENUTO IL VALORE SPECIFICATO DAL PARAMETRO @ALIAS - UTILIZZA LA LIKE)
		-- @ExtendedDescription
		-- @UseFlag

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		-- @IDRuleFIELD 
		-- @IDRuleTAB
		-- @ColumnID 
		-- @FieldName 
		-- @ALIAS
		,@ExtendedDescription = 'Contributo' -- (MOSTRA TUTTE LE RIGHE NELLA CUI DESCRIZIONE ESTESA SIA CONTENUTO IL VALORE SPECIFICATO DAL PARAMETRO @ExtendedDescription - UTILIZZA LA LIKE)
		-- @UseFlag

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'SEL' -- @OP
		-- @IDRuleFIELD 
		-- @IDRuleTAB
		-- @ColumnID 
		-- @FieldName 
		-- @ALIAS
		-- @ExtendedDescription
		,@UseFlag = 2 -- (MOSTRA TUTTE LE RIGHE SPECIFICANTI IL TIPO DI UTILIZZO DEL CAMPO, DOVE: NULL o 0 = visualizza e usa in JOIN/WHERE, 1 = visualizza soltanto, 2 = utilizza solo in JOIN/WHERE senza visualizzare)
--------------------------------------------------------


--------------------------------------------------------
-- INSERIMENTO
--------------------------------------------------------
DECLARE @LASTID int, @oID int, @cID int
-- SET @oID = dbo.fnGetObjectID('dbo.TAB_CONTR_031CM') -- METODO DI ESTRAZIONE ALTERNATIVO DELL'ID DI TABELLA
-- SET @cID = dbo.fnGetFieldColumnID('COD_AGEV','dbo.TAB_CONTR_031CM') -- METODO DI ESTRAZIONE ALTERNATIVO DELL'ID DELLA COLONNA
SELECT @oID = IDRuleTAB, @cID = ColumnID FROM dbo.fnGetFieldID('COD_AGEV','TAB_CONTR_031CM') -- METODO DI ESTRAZIONE PRINCIPALE DEGLI ID DI TABELLA E DI COLONNA

EXEC	@LASTID = spSelInsUpdDelCpyRULEFIELD 
		'INS' -- @OP
		,NULL -- @IDRuleFIELD (LA COLONNA CORRISPONDENTE A QUESTO PARAMETRO E' UNA PRIMARY KEY IDENTITY(1,1) QUINDI NON VA VALORIZZATA IN CASO DI INSERIMENTO - IL PARAMETRO SARA' COMUNQUE IGNORATO IN CASO DI VALORIZZAZIONE ACCIDENTALE)
		,@oid -- @IDRuleTAB (NOTARE CHE IL NOME DELLA TABELLA FISICA E' COMPRENSIVO DELLO SCHEMA "dbo.": LO SCHEMA NON VA OBBLIGATORIAMENTE SPECIFICATO - SARA' AGGIUNTO AUTOMATICAMENTE IL PREFISSO "dbo." - SE NON IN QUEI CASI NEI QUALI ESISTONO TABELLE AVENTI LO STESSO NOME MA UN DIVERSO SCHEMA)
		,@cID -- @ColumnID (VEDI NOTA PRECEDENTE) 
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		,'FIELDTEST' -- @ALIAS
		,'CAMPO DI PROVA COLLEGATO ALLA TABELLA BASE' -- @ExtendedDescription
		,2 -- @UseFlag
PRINT (@LASTID) -- SE RITORNA "-4" POTREBBE SIGNIFICARE CHE IL CRITERIO DI UNIQUE, APPLICATO ALLA TABELLA RULES_FIELDS PER I CAMPI "IDRuleTAB" E "ColumnID", E' STATO VIOLATO (NON E' CONSENTITO INSERIRE PIU' VOLTE LO STESSO CAMPO RIFERENTESI ALLA MEDESIMA TABELLA)
--------------------------------------------------------


--------------------------------------------------------
-- VARIAZIONE
--------------------------------------------------------
-- PRIMO ESEMPIO

DECLARE @oID int, @cID int
-- SET @oID = dbo.fnGetObjectID('dbo.TAB_CONTR_031CM') -- METODO DI ESTRAZIONE ALTERNATIVO DELL'ID DI TABELLA
-- SET @cID = dbo.fnGetFieldColumnID('COD_AGEV','dbo.TAB_CONTR_031CM') -- METODO DI ESTRAZIONE ALTERNATIVO DELL'ID DELLA COLONNA
SELECT @oID = IDRuleTAB, @cID = ColumnID FROM dbo.fnGetFieldID('COD_AGEV','TAB_CONTR_031CM') -- METODO DI ESTRAZIONE PRINCIPALE DEGLI ID DI TABELLA E DI COLONNA

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'UPD' -- @OP
		,2 -- @IDRuleFIELD (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		,@oID -- @IDRuleTAB (NOTARE CHE IL NOME DELLA TABELLA FISICA E' COMPRENSIVO DELLO SCHEMA "dbo.": LO SCHEMA NON VA OBBLIGATORIAMENTE SPECIFICATO - SARA' AGGIUNTO AUTOMATICAMENTE IL PREFISSO "dbo." - SE NON IN QUEI CASI NEI QUALI ESISTONO TABELLE AVENTI LO STESSO NOME MA UN DIVERSO SCHEMA)
		,@cID -- @ColumnID (VEDI NOTA PRECEDENTE) 
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		-- @ALIAS -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ExtendedDescription -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @UseFlag -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)


-- SECONDO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ALIAS E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRuleTAB E @ColumnID SONO STATI OMESSI. QUESTI ULTIMI, PERTANTO, MANTERRANNO I LORO VALORI ORIGINARI)

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'UPD' -- @OP
		,2 -- @IDRuleFIELD (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		-- @IDRuleTAB (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ColumnID -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		,@ALIAS = 'TESTTABLE' -- (VARIARE L'ALIAS DI UNA COLONNA PUO' COMPORTARE LA PERDITA DEL RIFERIMENTO DA PARTE DI ALCUNE FUNZIONI CHE UTILIZZANO L'ALIAS PER RISALIRE ALL'OGGETTO)
		-- @ExtendedDescription -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @UseFlag -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)


-- QUARTO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ExtendedDescription E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRuleTAB, @ColumnID E @ALIAS SONO STATI OMESSI. QUESTI ULTIMI, PERTANTO, MANTERRANNO I LORO VALORI ORIGINARI)

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'UPD' -- @OP
		,2 -- @IDRuleFIELD (CRITERIO DI SELEZIONE DELLA RIGA DA AGGIORNARE, DA SPECIFICARE OBBLIGATORIAMENTE)
		-- @IDRuleTAB (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @ColumnID -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		-- @ALIAS -- (QUESTA COLONNA, NON ESSENDO STATO VALORIZZATO IL PARAMETRO, SARA' MANTENUTA INVARIATA)
		,@ExtendedDescription = 'Nuova descrizione estesa' -- (VARIANDO LA DESCRIZIONE ESTESA NON SARANNO OSSERVABILI IMPATTI DI ALCUN TIPO)
		-- @UseFlag
--------------------------------------------------------


--------------------------------------------------------
-- ELIMINAZIONE 
--------------------------------------------------------
-- PRIMO ESEMPIO

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'DEL' -- @OP
		,2 -- @IDRuleFIELD (ELIMINAZIONE PER CHIAVE PRIMARIA, ELIMINA UNA SOLA RIGA, SE TROVA LA CORRISPONDENZA)
		-- @IDRuleTAB -- (PARAMETRO INUTILIZZATO)
		-- @ColumnID -- (PARAMETRO INUTILIZZATO)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
		-- @UseFlag (PARAMETRO INUTILIZZATO)


-- SECONDO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @IDRuleTAB E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO IL PARAMETRO @IDRuleFIELD E' STATO OMESSO

DECLARE @oID int, @cID int
SET @oID = dbo.fnGetObjectID('dbo.TAB_CONTR_031CM') -- ESTRAZIONE DELL'ID DI TABELLA

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'DEL' -- @OP
		-- @IDRuleFIELD (PARAMETRO INUTILIZZATO)
		,@IDRuleTAB = @oID -- (VALORIZZANDO QUESTO PARAMETRO SENZA SPECIFICARE UN VALORE PER IL PARAMETRO SUCCESSIVO - @ColumnID - IN FASE DI ELIMINAZIONE, PRODURRA' L'ELIMINAZIONE DI TUTTE LE COLONNE RELATIVE ALLA TABELLA SPECIFICATA. OVVIAMENTE NON DALLA TABELLA FISICA MA DA QUELLA DELLE REGOLE "RULES_FIELDS")
		-- @ColumnID -- (PARAMETRO INUTILIZZATO)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
		-- @UseFlag (PARAMETRO INUTILIZZATO)


-- TERZO ESEMPIO: NOTARE CHE I NOMI DEL PARAMETRO @IDRuleTAB E @ColumnID SONO STATI ESPRESSAMENTE SPECIFICATI
-- IN QUANTO IL PARAMETRO @IDRuleFIELD E' STATO OMESSO

DECLARE @oID int, @cID int
-- SET @oID = dbo.fnGetObjectID('dbo.TAB_CONTR_031CM') -- METODO DI ESTRAZIONE ALTERNATIVO DELL'ID DI TABELLA
-- SET @cID = dbo.fnGetFieldColumnID('COD_AGEV','dbo.TAB_CONTR_031CM') -- METODO DI ESTRAZIONE ALTERNATIVO DELL'ID DELLA COLONNA
SELECT @oID = IDRuleTAB, @cID = ColumnID FROM dbo.fnGetFieldID('COD_AGEV','TAB_CONTR_031CM') -- METODO DI ESTRAZIONE PRINCIPALE DEGLI ID DI TABELLA E DI COLONNA

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'DEL' -- @OP
		-- @IDRuleFIELD (PARAMETRO INUTILIZZATO)
		,@IDRuleTAB = @oID -- (ELIMINA UNA SOLA RIGA IN QUANTO COMBINATO CON IL PARAMETRO SUCCESSIVO)
		,@ColumnID = @cID -- (ELIMINA UNA SOLA RIGA IN QUANTO COMBINATO CON IL PARAMETRO PRECEDENTE)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
		-- @UseFlag (PARAMETRO INUTILIZZATO)


-- QUARTO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ALIAS E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI  @IDRuleFIELD, @IDRuleTAB E @ColumnID SONO STATI OMESSI
EXEC	spSelInsUpdDelCpyRULEFIELD 
		'DEL' -- @OP
		-- @IDRuleFIELD (PARAMETRO INUTILIZZATO)
		-- @IDRuleTAB -- (PARAMETRO INUTILIZZATO)
		-- @ColumnID -- (PARAMETRO INUTILIZZATO)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		,@ALIAS = 'FIELDTEST' -- (ELIMINA UNA SOLA RIGA - IL VALORE DELLA COLONNA "ALIAS" HA UN INDICE UNIQUE -, SE TROVA LA CORRISPONDENZA)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
		-- @UseFlag (PARAMETRO INUTILIZZATO)
--------------------------------------------------------


--------------------------------------------------------
-- COPIA (O DUPLICAZIONE)
-- LA COPIA PUO' ESSERE EFFETTUATA ESCLUSIVAMENTE
-- PARTENDO DA UN IDRule ESISTENTE O DA UN RuleName 
-- ESISTENTE
--------------------------------------------------------
-- PRIMO ESEMPIO

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'CPY' -- @OP
		,1 -- @IDRuleFIELD (CREA UNA RIGA CLONE DEL CAMPO CORRISPONDENTE ALLA COLONNA CHIAVE, DIVERSIFICANDOLA DALLA RIGA ORIGINE VARIANDO LA COLONNA RuleName - SARA' AGGIUNTO, IN CODA AL PREESISTENTE VALORE DELLA COLONNA ALIAS, UN NUMERO PROGRESSIVO CONSECUTIVO AUTOMATICO DEL TIPO "AliasColonna(1)")
		-- @IDRuleFIELD (PARAMETRO INUTILIZZATO)
		-- @IDRuleTAB -- (PARAMETRO INUTILIZZATO)
		-- @ColumnID -- (PARAMETRO INUTILIZZATO)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		-- @ALIAS -- (PARAMETRO INUTILIZZATO)
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
		-- @UseFlag (PARAMETRO INUTILIZZATO)


-- SECONDO ESEMPIO: NOTARE CHE IL NOME DEL PARAMETRO @ALIAS E' STATO ESPRESSAMENTE SPECIFICATO 
-- IN QUANTO I PARAMETRI @IDRuleFIELD, @IDRuleTAB, @IDRule, @ColumnID E @FieldName SONO STATI OMESSI

EXEC	spSelInsUpdDelCpyRULEFIELD 
		'CPY' -- @OP
		-- @IDRuleFIELD (PARAMETRO INUTILIZZATO)
		-- @IDRuleTAB -- (PARAMETRO INUTILIZZATO)
		-- @ColumnID -- (PARAMETRO INUTILIZZATO)
		-- @FieldName (PARAMETRO NON VALORIZZATO IN QUANTO UTILIZZATO SOLO CON L'OPZIONE 'SEL' A TITOLO DI FILTRO)
		,@ALIAS = 'AliasColonna' (CREA UNA RIGA CLONE DELLA REGOLA LA CUI COLONNA ALIAS CORRISPONDE A QUANTO SPECIFICATO NEL PARAMETRO, DIVERSIFICANDOLA DALLA RIGA ORIGINE IN QUANTO, NELLA NUOVA RIGA, ALLA COLONNA ALIAS SARA' AGGIUNTO, IN CODA AL PREESISTENTE VALORE, UN NUMERO PROGRESSIVO CONSECUTIVO AUTOMATICO DEL TIPO "AliasColonna(1)")
		-- @ExtendedDescription (PARAMETRO INUTILIZZATO)
		-- @UseFlag (PARAMETRO INUTILIZZATO)
*/
ALTER PROC	dbo.spSelInsUpdDelCpyRULEFIELD
			@OP varchar(3) -- 'SEL', 'INS', 'UPD', 'DEL', 'CPY'
			,@IDRuleField int = NULL
			,@IDRuleTAB int = NULL
			,@ColumnID int = NULL
			,@FieldName varchar(128) = NULL 
			,@ALIAS varchar(128) = NULL
			,@ExtendedDescription varchar(MAX) = NULL
			,@UseFlag smallInt = NULL
AS

IF ISNULL(@OP,'') != ''
	BEGIN
		DECLARE @rulesFIELDCount int

		-----------------------------------------------------------------------------
		-- SELEZIONE DI UNA O PIU' REGOLE IN BASE ALLA VALORIZZAZIONE DEI PARAMETRI
		-----------------------------------------------------------------------------
		IF @OP = 'SEL'
			BEGIN
				SELECT	
						R.IDRuleField
						,R.IDRuleTab
						,R.ColumnID
						,V.FieldName
						,V.FullFieldName
						,R.ALIAS
						,R.ExtendedDescription
						,R.UseFlag
				FROM	RULES_FIELDS R WITH(NOLOCK)
						INNER JOIN
						VRULES_FIELDS V
						ON R.IDRuleField = V.IDRuleField
				WHERE	(R.IDRuleField = @IDRuleField OR @IDRuleField IS NULL)
				AND		(ParentID = @IDRuleTAB OR @IDRuleTAB IS NULL)
				AND		(R.ColumnID = @ColumnID OR @ColumnID IS NULL)
				AND		(V.FIELDNAME = @FieldName OR @FieldName IS NULL)
				AND		(R.ALIAS LIKE '%' + @ALIAS + '%' OR @ALIAS IS NULL)
				AND		(R.ExtendedDescription LIKE '%' + @ExtendedDescription + '%' OR @ExtendedDescription IS NULL)
				AND		(R.UseFlag = @UseFlag OR @UseFlag IS NULL)
			END

		-----------------------------------------------------------------------------
		-- INSERIMENTO DI UNA NUOVO CAMPO: E' OBBLIGATORIO VALORIZZARE TUTTI I
		-- PARAMETRI RELATIVI ALLE COLONNE DELLA TABELLA DEFINITE COME "NOT NULL"
		-----------------------------------------------------------------------------
		IF @OP = 'INS'
		AND ISNULL(@IDRuleTAB,0) != 0
		AND ISNULL(@ColumnID,0) != 0
		AND ISNULL(@ALIAS,'') != ''
			BEGIN
				BEGIN TRY
					IF EXISTS (SELECT IDruleTAB FROM RULES_TABLES WITH(NOLOCK) WHERE ObjectID = @IDRuleTAB)
						BEGIN
							DECLARE @RULES_FIELDS RULES_FIELDS_TYPE

							INSERT	@RULES_FIELDS
									(
										IDruleTAB
										,ColumnID
										,ALIAS
										,ExtendedDescription
										,UseFlag
									)
							VALUES	
									(
										@IDRuleTAB
										,@ColumnID
										,@ALIAS
										,@ExtendedDescription
										,@UseFlag
									)

							SELECT	
									T.IDruleTAB
									,T.ColumnID
									,T.ALIAS
									,T.ExtendedDescription
									,T.UseFlag
							FROM	@RULES_FIELDS T
									LEFT JOIN
									RULES_FIELDS RF WITH(NOLOCK)
									ON T.IDRuleTAB = RF.IDRuleTAB
									AND T.ColumnID = RF.ColumnID
							WHERE	RF.IDRuleTab IS NULL -- EVITA I DUPLICATI

							RETURN ISNULL(SCOPE_IDENTITY(),0)
						END
				END TRY
				BEGIN CATCH
					DECLARE @ErrorMessage NVARCHAR(4000);
					DECLARE @ErrorSeverity INT;
					DECLARE @ErrorState INT;

					SELECT @ErrorMessage = ERROR_MESSAGE(),
						   @ErrorSeverity = ERROR_SEVERITY(),
						   @ErrorState = ERROR_STATE();

					RAISERROR (@ErrorMessage,
							   @ErrorSeverity,
							   @ErrorState
							   )
				END CATCH
			END
		-----------------------------------------------------------------------------


		-----------------------------------------------------------------------------
		-- AGGIORNAMENTO DEI CONTENUTI DEI CAMPI (AD ESCLUSIONE DELL'IDRuleTAB)
		-- IN BASE AI PARAMETRI VALORIZZATI: I VALORI DELLE COLONNE NON SPECIFICATE 
		-- NEI PARAMETRI SARANNO MANTENUTI INALTERATI PERTANTO, PER ALTERARLI O
		-- SVUOTARLI (NULL, QUANDO CONSENTITO) INVOCARE LA STORED PROCEDURE
		-- VALORIZZANDO TUTTI I PARAMETRI DESIDERATI
		-----------------------------------------------------------------------------
		IF @OP = 'UPD'
		AND ISNULL(@IDRuleField,0) != 0 -- PARAMETRO OBBLIGATORIO PER EFFETTUARE L'AGGIORNAMENTO
			BEGIN	
				DECLARE 
						@oldIDRuleTAB int
						,@oldColumnID int
						,@oldALIAS varchar(128)
						,@oldExtendedDescription varchar(MAX)
						,@oldUseFlag smallInt
				
				-- MEMORIZZAZIONE DEI DATI PREESISTENTI (SE PRESENTI)
				-- PER LA LORO RIASSEGNAZIONE NEL CASO IN CUI QUESTI
				-- DEBBANO ESSERE MANTENUTI (OVVERO NON NE E' STATO
				-- SPECIFICATO UN NUOVO VALORE)
				SELECT
						@oldIDRuleTAB = IDRuleTAB
						,@oldColumnID = ColumnID
						,@oldALIAS = ALIAS
						,@oldExtendedDescription = ExtendedDescription
						,@oldUseFlag = UseFlag
				FROM	RULES_FIELDS WITH(NOLOCK)
				WHERE	IDRuleFIELD = @IDRuleFIELD

				-- SE ESISTE UNA COLONNA DA AGGIORNARE, RITORNATA DALLA 
				-- RICERCA PER IL PARAMETRO @IDRule, ALLORA PROCEDE CON
				-- L'AGGIORNAMENTO DELLE SOLE COLONNE PER LE QUALI E'
				-- STATO VALORIZZATO IL CORRISPONDENTE PARAMETRO
				IF ISNULL(@oldIDRuleTAB,0) != 0
					BEGIN
						UPDATE	RULES_FIELDS
						SET		
								IDRuleTAB =
								CASE
									WHEN @IDRuleTAB IS NULL
									THEN @oldIDRuleTAB
									ELSE @IDRuleTAB
								END
								,ColumnID =
								CASE
									WHEN @ColumnID IS NULL
									THEN @oldColumnID
									ELSE @ColumnID
								END
								,ALIAS =
								CASE
									WHEN @ALIAS IS NULL
									THEN @oldALIAS
									ELSE @ALIAS
								END
								,ExtendedDescription =
								CASE
									WHEN @ExtendedDescription IS NULL
									THEN @oldExtendedDescription
									ELSE @ExtendedDescription
								END
								,UseFlag =
								CASE
									WHEN @UseFlag IS NULL
									THEN @oldUseFlag
									ELSE @UseFlag
								END
						WHERE	IDRuleFIELD = @IDRuleFIELD
					END
			END
		-----------------------------------------------------------------------------


		-----------------------------------------------------------------------------
		-- ELIMINAZIONE DI UNA REGOLA IN BASE ALL'IDRuleTAB, ALL'ObjectID, ALL'IDRule
		-- ALL'ALIAS OPPURE ALL'ExtendedDescription (UNO SOLTANTO TRA QUESTI)
		-----------------------------------------------------------------------------
		IF @OP = 'DEL'
			BEGIN
				IF ISNULL(@IDRuleFIELD,0) != 0
					BEGIN
						DELETE 
						FROM	RULES_FIELDS
						WHERE	IDRuleFIELD = @IDRuleFIELD
					END
				IF ISNULL(@IDruleTAB,0) != 0
				AND ISNULL(@ColumnID,0) != 0
					BEGIN
						DELETE 
						FROM	RULES_FIELDS
						WHERE	IDruleTAB = @IDruleTAB
						AND		@ColumnID = @ColumnID
					END
				IF ISNULL(@ALIAS,'') != ''
					BEGIN
						DELETE 
						FROM	RULES_FIELDS
						WHERE	ALIAS = @ALIAS
					END
				IF ISNULL(@ExtendedDescription,'') != ''
					BEGIN
						DELETE 
						FROM	RULES_FIELDS
						WHERE	ExtendedDescription = @ExtendedDescription
					END
			END
		-----------------------------------------------------------------------------


		-----------------------------------------------------------------------------
		-- CREAZIONE DI UNA COPIA CLONE DI UNA REGOLA, AGGIUNGENDO ALL'ALIAS DI QUESTA 
		-- UN SUFFISSO NUMERICO PROGRESSIVO "(1)", "(2)", "(3)", ETC.
		-- LA COPIA PUO' ESSERE EFFETTUATA PARTENDO DA UN IDRuleFIELD ESISTENTE O DA
		-- UN "ALIAS" ESISTENTE
		-----------------------------------------------------------------------------
		IF @OP = 'CPY'
			BEGIN
				IF ISNULL(@IDRuleFIELD,0) != 0
					BEGIN
						SELECT	@rulesFIELDCount = COUNT(*)
						FROM	RULES_FIELDS WITH(NOLOCK)
						WHERE	ALIAS = (SELECT ALIAS FROM RULES_FIELDS WITH(NOLOCK) WHERE IDRuleFIELD = @IDRuleFIELD)

						INSERT	RULES_FIELDS
								(
									IDRuleTAB
									,ColumnID
									,ALIAS
									,ExtendedDescription
									,UseFlag
								) 
						SELECT	
								IDRuleTAB
								,ColumnID
								,LEFT(ALIAS,120)  + ' (' + CAST(@rulesFIELDCount AS varchar(6)) + ')' AS ALIAS -- RIDUCE A 120 CARATTERI IL VALORE DELLA COLONNA PER POTERVI INSERIRE IL PROGRESSIVO (LUNGO AL MASSIMO 6 CARATTERI), PIU' LE PARENTESI TONDE
								,ExtendedDescription
								,UseFlag
						FROM	RULES_FIELDS WITH(NOLOCK)
						WHERE	IDRuleFIELD = @IDRuleFIELD
					END

				IF ISNULL(@ALIAS,'') != ''
					BEGIN
						SELECT	@rulesFIELDCount = COUNT(*)
						FROM	RULES_FIELDS WITH(NOLOCK)
						WHERE	ALIAS = @ALIAS

						INSERT	RULES_FIELDS
								(
									IDRuleTAB
									,ColumnID
									,ALIAS
									,ExtendedDescription
									,UseFlag
								) 
						SELECT	TOP 1
								IDRuleTAB
								,ColumnID
								,LEFT(ALIAS,120)  + ' (' + CAST(@rulesFIELDCount AS varchar(6)) + ')' AS ALIAS -- RIDUCE A 120 CARATTERI IL VALORE DELLA COLONNA PER POTERVI INSERIRE IL PROGRESSIVO (LUNGO AL MASSIMO 6 CARATTERI), PIU' LE PARENTESI TONDE
								,ExtendedDescription
								,UseFlag
						FROM	RULES_FIELDS WITH(NOLOCK)
						WHERE	ALIAS = @ALIAS
						ORDER BY ALIAS
					END
			END
		-----------------------------------------------------------------------------

	END
